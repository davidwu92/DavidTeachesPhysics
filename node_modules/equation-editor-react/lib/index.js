'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var $ = _interopDefault(require('jquery'));
require('mathquill/build/mathquill.css');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
window.jQuery = $;
// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
require("mathquill/build/mathquill");
// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
// eslint-disable-next-line no-undef
var mathQuill = MathQuill.getInterface(2);
/**
 * @typedef {EquationEditorProps} props
 * @prop {Function} onChange Triggered when content of the equation editor changes
 * @prop {string} value Content of the equation handler
 * @prop {string} autoCommands List of commands for which you only have to type the name of the
 * command with a \ in front of it. Examples: pi theta rho sum
 * @prop {string} autoOperatorNames List of operators for which you only have to type the name of the
 * operator with a \ in front of it. Examples: sin cos tan
 * @extends {Component<EquationEditorProps>}
 */
var EquationEditor = /** @class */ (function (_super) {
    __extends(EquationEditor, _super);
    // Element needs to be in the class format and thus requires a constructor. The steps that are run
    // in the constructor is to make sure that React can succesfully communicate with the equation
    // editor.
    function EquationEditor(props) {
        var _this = _super.call(this, props) || this;
        _this.element = React.createRef();
        _this.mathField = null;
        // MathJax apparently fire 2 edit events on startup.
        _this.ignoreEditEvents = 2;
        return _this;
    }
    EquationEditor.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, onChange = _a.onChange, value = _a.value, autoCommands = _a.autoCommands, autoOperatorNames = _a.autoOperatorNames;
        var config = {
            handlers: {
                edit: function () {
                    if (_this.ignoreEditEvents > 0) {
                        _this.ignoreEditEvents -= 1;
                        return;
                    }
                    if (_this.mathField.latex() !== value) {
                        onChange(_this.mathField.latex());
                    }
                },
            },
            autoCommands: autoCommands,
            autoOperatorNames: autoOperatorNames,
        };
        this.mathField = mathQuill.MathField(this.element.current, config);
        this.mathField.latex(value || "");
    };
    EquationEditor.prototype.render = function () {
        return (React__default.createElement("span", { ref: this.element, style: { border: "0px", boxShadow: "None" } }));
    };
    return EquationEditor;
}(React.Component));

exports.default = EquationEditor;
//# sourceMappingURL=index.js.map
