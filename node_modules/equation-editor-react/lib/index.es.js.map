{"version":3,"file":"index.es.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { Component, createRef } from \"react\";\n\n// Import JQuery, required for the functioning of the equation editor\nimport $ from \"jquery\";\n\n// Import the styles from the Mathquill editor\nimport \"mathquill/build/mathquill.css\";\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nwindow.jQuery = $;\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nrequire(\"mathquill/build/mathquill\");\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\n// eslint-disable-next-line no-undef\nconst mathQuill = MathQuill.getInterface(2);\n\ntype EquationEditorProps = {\n  onChange(latex: string): void;\n  value: string;\n  autoCommands: string;\n  autoOperatorNames: string;\n};\n\n/**\n * @typedef {EquationEditorProps} props\n * @prop {Function} onChange Triggered when content of the equation editor changes\n * @prop {string} value Content of the equation handler\n * @prop {string} autoCommands List of commands for which you only have to type the name of the\n * command with a \\ in front of it. Examples: pi theta rho sum\n * @prop {string} autoOperatorNames List of operators for which you only have to type the name of the\n * operator with a \\ in front of it. Examples: sin cos tan\n * @extends {Component<EquationEditorProps>}\n */\nclass EquationEditor extends Component<EquationEditorProps> {\n  element: any;\n  mathField: any;\n  ignoreEditEvents: number;\n\n  // Element needs to be in the class format and thus requires a constructor. The steps that are run\n  // in the constructor is to make sure that React can succesfully communicate with the equation\n  // editor.\n  constructor(props: EquationEditorProps) {\n    super(props);\n\n    this.element = createRef();\n    this.mathField = null;\n\n    // MathJax apparently fire 2 edit events on startup.\n    this.ignoreEditEvents = 2;\n  }\n\n  componentDidMount() {\n    const { onChange, value, autoCommands, autoOperatorNames } = this.props;\n\n    const config = {\n      handlers: {\n        edit: () => {\n          if (this.ignoreEditEvents > 0) {\n            this.ignoreEditEvents -= 1;\n            return;\n          }\n          if (this.mathField.latex() !== value) {\n            onChange(this.mathField.latex());\n          }\n        },\n      },\n      autoCommands,\n      autoOperatorNames,\n    };\n\n    this.mathField = mathQuill.MathField(this.element.current, config);\n    this.mathField.latex(value || \"\");\n  }\n\n  render() {\n    return (\n      <span ref={this.element} style={{ border: \"0px\", boxShadow: \"None\" }} />\n    );\n  }\n}\n\nexport default EquationEditor;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;AACA,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;AAElB;AACA;AACA,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAErC;AACA;AACA;AACA,IAAM,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAS5C;;;;;;;;;;AAUA;IAA6B,kCAA8B;;;;IAQzD,wBAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAOb;QALC,KAAI,CAAC,OAAO,GAAG,SAAS,EAAE,CAAC;QAC3B,KAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;QAGtB,KAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;;KAC3B;IAED,0CAAiB,GAAjB;QAAA,iBAqBC;QApBO,IAAA,eAAiE,EAA/D,sBAAQ,EAAE,gBAAK,EAAE,8BAAY,EAAE,wCAAgC,CAAC;QAExE,IAAM,MAAM,GAAG;YACb,QAAQ,EAAE;gBACR,IAAI,EAAE;oBACJ,IAAI,KAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;wBAC7B,KAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;wBAC3B,OAAO;qBACR;oBACD,IAAI,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,KAAK,EAAE;wBACpC,QAAQ,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;qBAClC;iBACF;aACF;YACD,YAAY,cAAA;YACZ,iBAAiB,mBAAA;SAClB,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;KACnC;IAED,+BAAM,GAAN;QACE,QACE,8BAAM,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,GAAI,EACxE;KACH;IACH,qBAAC;AAAD,CA9CA,CAA6B,SAAS;;;;"}